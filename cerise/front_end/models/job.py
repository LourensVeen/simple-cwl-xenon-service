# coding: utf-8

from __future__ import absolute_import
from front_end.models.workflow_binding import WorkflowBinding
from .base_model_ import Model
from datetime import datetime
from ..util import deserialize_model


class Job(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, workflow: str=None, input: WorkflowBinding=None, state: str=None, output: WorkflowBinding=None, log: str=None):
        """
        Job - a model defined in Swagger

        :param id: The id of this Job.
        :type id: str
        :param name: The name of this Job.
        :type name: str
        :param workflow: The workflow of this Job.
        :type workflow: str
        :param input: The input of this Job.
        :type input: WorkflowBinding
        :param state: The state of this Job.
        :type state: str
        :param output: The output of this Job.
        :type output: WorkflowBinding
        :param log: The log of this Job.
        :type log: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'workflow': str,
            'input': WorkflowBinding,
            'state': str,
            'output': WorkflowBinding,
            'log': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'workflow': 'workflow',
            'input': 'input',
            'state': 'state',
            'output': 'output',
            'log': 'log'
        }

        self._id = id
        self._name = name
        self._workflow = workflow
        self._input = input
        self._state = state
        self._output = output
        self._log = log

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The job of this Job.
        :rtype: Job
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Job.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Job.

        :param id: The id of this Job.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Job.
        user supplied (non unique) name for this job

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Job.
        user supplied (non unique) name for this job

        :param name: The name of this Job.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def workflow(self) -> str:
        """
        Gets the workflow of this Job.
        location of the workflow

        :return: The workflow of this Job.
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow: str):
        """
        Sets the workflow of this Job.
        location of the workflow

        :param workflow: The workflow of this Job.
        :type workflow: str
        """
        if workflow is None:
            raise ValueError("Invalid value for `workflow`, must not be `None`")

        self._workflow = workflow

    @property
    def input(self) -> WorkflowBinding:
        """
        Gets the input of this Job.

        :return: The input of this Job.
        :rtype: WorkflowBinding
        """
        return self._input

    @input.setter
    def input(self, input: WorkflowBinding):
        """
        Sets the input of this Job.

        :param input: The input of this Job.
        :type input: WorkflowBinding
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def state(self) -> str:
        """
        Gets the state of this Job.

        :return: The state of this Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """
        Sets the state of this Job.

        :param state: The state of this Job.
        :type state: str
        """
        allowed_values = ["Waiting", "Running", "Success", "Cancelled", "SystemError", "TemporaryFailure", "PermanentFailure"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def output(self) -> WorkflowBinding:
        """
        Gets the output of this Job.

        :return: The output of this Job.
        :rtype: WorkflowBinding
        """
        return self._output

    @output.setter
    def output(self, output: WorkflowBinding):
        """
        Sets the output of this Job.

        :param output: The output of this Job.
        :type output: WorkflowBinding
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def log(self) -> str:
        """
        Gets the log of this Job.

        :return: The log of this Job.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log: str):
        """
        Sets the log of this Job.

        :param log: The log of this Job.
        :type log: str
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")

        self._log = log

