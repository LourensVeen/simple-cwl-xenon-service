# coding: utf-8

from __future__ import absolute_import
from front_end.models.workflow_binding import WorkflowBinding
from .base_model_ import Model
from datetime import datetime
from ..util import deserialize_model


class JobDescription(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, workflow: str=None, input: WorkflowBinding=None):
        """
        JobDescription - a model defined in Swagger

        :param name: The name of this JobDescription.
        :type name: str
        :param workflow: The workflow of this JobDescription.
        :type workflow: str
        :param input: The input of this JobDescription.
        :type input: WorkflowBinding
        """
        self.swagger_types = {
            'name': str,
            'workflow': str,
            'input': WorkflowBinding
        }

        self.attribute_map = {
            'name': 'name',
            'workflow': 'workflow',
            'input': 'input'
        }

        self._name = name
        self._workflow = workflow
        self._input = input

    @classmethod
    def from_dict(cls, dikt) -> 'JobDescription':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The job-description of this JobDescription.
        :rtype: JobDescription
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this JobDescription.
        user supplied (non unique) name for this job

        :return: The name of this JobDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this JobDescription.
        user supplied (non unique) name for this job

        :param name: The name of this JobDescription.
        :type name: str
        """

        self._name = name

    @property
    def workflow(self) -> str:
        """
        Gets the workflow of this JobDescription.
        location of the workflow

        :return: The workflow of this JobDescription.
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow: str):
        """
        Sets the workflow of this JobDescription.
        location of the workflow

        :param workflow: The workflow of this JobDescription.
        :type workflow: str
        """
        if workflow is None:
            raise ValueError("Invalid value for `workflow`, must not be `None`")

        self._workflow = workflow

    @property
    def input(self) -> WorkflowBinding:
        """
        Gets the input of this JobDescription.

        :return: The input of this JobDescription.
        :rtype: WorkflowBinding
        """
        return self._input

    @input.setter
    def input(self, input: WorkflowBinding):
        """
        Sets the input of this JobDescription.

        :param input: The input of this JobDescription.
        :type input: WorkflowBinding
        """

        self._input = input

